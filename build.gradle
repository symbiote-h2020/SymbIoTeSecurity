buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
        mavenLocal()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.2.2'
        classpath 'org.owasp:dependency-check-gradle:2.0.1'
    }
}
// code
apply plugin: "io.spring.dependency-management"
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

// code quality
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

// IDEs
apply plugin: 'eclipse'
apply plugin: 'idea'

// publishing
apply plugin: 'com.cinnober.gradle.semver-git'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'eu.h2020.symbiote'
            version = project.version
            from components.java
        }
    }
}

// dependencies section
repositories {
    mavenCentral()
}

// this is a library, not a runnable spring-boot jar, therefore
bootRepackage.enabled = false

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: classes) {
    classifier = "tests"
    from sourceSets.test.allSource
    from sourceSets.test.output
}

artifacts {
    archives sourcesJar
    archives testsJar
}

dependencies {
    compile('io.jsonwebtoken:jjwt:0.7.0')
    compile('org.bouncycastle:bcprov-jdk15on:1.56')
    compile('org.bouncycastle:bcpkix-jdk15on:1.56')

    // TODO think how to limit those dependecies...
    compile('com.fasterxml.jackson.core:jackson-annotations:2.8.7+')
    compile('org.springframework.data:spring-data-commons')
    compile('com.netflix.feign:feign-jackson:8.18.0')
    compile('org.springframework:spring-web:4.3.9.RELEASE')


    // common testing
    testCompile('junit:junit:4.+')
    //TODO do we need those in a client/pojo library... replace with mockito...
    // we should only mock the service here and do the integration in AAM repository against real AAM codes
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.powermock:powermock-api-mockito:1.6.4')
    testCompile('org.powermock:powermock-core:1.6.4')
    testCompile('org.powermock:powermock-module-junit4:1.6.4')
    testRuntime('org.springframework.boot:spring-boot-starter-web')
}

// code quality below
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadocs")
}

// jacoco configuration section
jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = file("$rootDir/build/reports/security")
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport)//, 'dependencyCheckAnalyze')